/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import model.MySQL;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author barth
 */
public class WProducts extends javax.swing.JPanel {
    private WHome home;
    HashMap<String, String> categoryMap = new HashMap<>();

    /**
     * Creates new form Overview
     */
    public WProducts(WHome home) {
        initComponents();
        this.home = home;
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        productsTable.setDefaultRenderer(Object.class, renderer);
        loadCategories();
        loadProducts();
    }
    
    private void loadCategories() {
        try {
            ResultSet resultSet = MySQL.executeSearch("SELECT * FROM `category`");
            Vector<String> vector = new Vector<>();
            vector.add("Select");
            
            while (resultSet.next()) {
                vector.add(resultSet.getString("name"));
                categoryMap.put(resultSet.getString("name"), resultSet.getString("id"));
            }
            
            DefaultComboBoxModel model = new DefaultComboBoxModel(vector);
            categoryComboBox.setModel(model);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void loadProducts() {
        try {
            ResultSet resultSet = MySQL.executeSearch("SELECT * FROM `w_product` INNER JOIN `category` "
                    + "ON `w_product`.`category_id` = `category`.`id`");
            DefaultTableModel model = (DefaultTableModel)productsTable.getModel();
            model.setRowCount(0);
            
            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("w_product.id"));
                vector.add(resultSet.getString("w_product.name"));
                vector.add(resultSet.getString("w_product.price"));
                vector.add(resultSet.getString("w_product.weight"));
                vector.add(resultSet.getString("category.name"));
                model.addRow(vector);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void reset() {
        productIDField.setText("");
        productNameField.setText("");
        priceFormattedField.setText("0");
        weightField.setText("");
        categoryComboBox.setSelectedIndex(0);
        productsTable.clearSelection();
        productIDField.setEditable(true);
        addButton.setEnabled(true);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        closeLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        productIDField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        productNameField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        priceFormattedField = new javax.swing.JFormattedTextField();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        productsTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        weightField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        categoryComboBox = new javax.swing.JComboBox<>();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        closeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/close-icon.png"))); // NOI18N
        closeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeLabelMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel6.setText("Product ID :");

        productIDField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel7.setText("Product Name :");

        productNameField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel8.setText("Price :");

        priceFormattedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        priceFormattedField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        priceFormattedField.setText("0");
        priceFormattedField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        addButton.setBackground(new java.awt.Color(245, 219, 200));
        addButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(0, 0, 0));
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/add-icon.png"))); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        updateButton.setBackground(new java.awt.Color(245, 219, 200));
        updateButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        updateButton.setForeground(new java.awt.Color(0, 0, 0));
        updateButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/update-icon.png"))); // NOI18N
        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        deleteButton.setBackground(new java.awt.Color(245, 219, 200));
        deleteButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        deleteButton.setForeground(new java.awt.Color(0, 0, 0));
        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/delete-icon.png"))); // NOI18N
        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        resetButton.setBackground(new java.awt.Color(245, 219, 200));
        resetButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        resetButton.setForeground(new java.awt.Color(0, 0, 0));
        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/reset-icon.png"))); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        productsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Price", "Weight", "Category"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productsTable.getTableHeader().setReorderingAllowed(false);
        productsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                productsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(productsTable);

        jLabel3.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(66, 45, 22));
        jLabel3.setText("Products");

        jLabel1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel1.setText("Weight :");

        weightField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel2.setText("Category :");

        categoryComboBox.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        categoryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(weightField)
                                    .addComponent(productIDField, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(productNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                                    .addComponent(categoryComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(priceFormattedField, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(updateButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deleteButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetButton)))
                        .addGap(0, 58, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeLabel)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(productIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(productNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(priceFormattedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(weightField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(categoryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton)
                    .addComponent(updateButton)
                    .addComponent(deleteButton)
                    .addComponent(resetButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseClicked
        this.home.removeInventory();
    }//GEN-LAST:event_closeLabelMouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String id = productIDField.getText();
        String productName = productNameField.getText();
        String price = priceFormattedField.getText();
        String weight = weightField.getText();
        String category = String.valueOf(categoryComboBox.getSelectedItem());
        
        if (id.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a product ID", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (!id.matches("^(0[0-9]{2}|[1-9][0-9]{2}|00[1-9])$")) {
            JOptionPane.showMessageDialog(this, "INVALID product ID", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (productName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a product name", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (!productName.matches("^[a-zA-Z\\s]+$")) {
            JOptionPane.showMessageDialog(this, "INVALID product name", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (price.equals("0")) {
            JOptionPane.showMessageDialog(this, "Please enter a price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (price.equals("0.00")) {
            JOptionPane.showMessageDialog(this, "Please enter a price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (price.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (!price.matches("^(0|[1-9]\\d*)?(\\.\\d+)?(?<=\\d)$")) {
            JOptionPane.showMessageDialog(this, "INVALID price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (weight.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a weight", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if(category.equals("Select")) {
            JOptionPane.showMessageDialog(this, "Please select a category", "Warning", JOptionPane.WARNING_MESSAGE);
        }else {
            try {
                ResultSet resultSet = MySQL.executeSearch("SELECT * FROM `w_product` WHERE `id` = '"+id+"' "
                        + "OR `name` = '"+productName+"'");
                
                if (resultSet.next()) {
                    JOptionPane.showMessageDialog(this, "This product already exists", "Warning", JOptionPane.WARNING_MESSAGE);
                }else {
                    MySQL.executeIUD("INSERT INTO `w_product`(`id`, `name`, `price`, `weight`, `category_id`) "
                            + "VALUES('"+id+"', '"+productName+"', '"+price+"', '"+weight+"', '"+categoryMap.get(category)+"')");
                    loadProducts();
                    reset();
                    JOptionPane.showMessageDialog(this, "New product added successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void productsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_productsTableMouseClicked
        int row = productsTable.getSelectedRow();
        productIDField.setText(String.valueOf(productsTable.getValueAt(row, 0)));
        productNameField.setText(String.valueOf(productsTable.getValueAt(row, 1)));
        priceFormattedField.setText(String.valueOf(productsTable.getValueAt(row, 2)));
        weightField.setText(String.valueOf(productsTable.getValueAt(row, 3)));
        categoryComboBox.setSelectedItem(String.valueOf(productsTable.getValueAt(row, 4)));
        productIDField.setEditable(false);
        addButton.setEnabled(false);
    }//GEN-LAST:event_productsTableMouseClicked

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        int row = productsTable.getSelectedRow();
        String id = productIDField.getText();
        String productName = productNameField.getText();
        String price = priceFormattedField.getText();
        String weight = weightField.getText();
        String category = String.valueOf(categoryComboBox.getSelectedItem());
        
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a product to update", "Warning", JOptionPane.WARNING_MESSAGE);
        }else {
            if (productName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a product name", "Warning", JOptionPane.WARNING_MESSAGE);
            }else if (!productName.matches("^[a-zA-Z\\s]+$")) {
                JOptionPane.showMessageDialog(this, "INVALID product name", "Warning", JOptionPane.WARNING_MESSAGE);
            }else if (price.equals("0")) {
                JOptionPane.showMessageDialog(this, "Please enter a price", "Warning", JOptionPane.WARNING_MESSAGE);
            }else if (price.equals("0.00")) {
                JOptionPane.showMessageDialog(this, "Please enter a price", "Warning", JOptionPane.WARNING_MESSAGE);
            }else if (price.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a price", "Warning", JOptionPane.WARNING_MESSAGE);
            }else if (!price.matches("^(0|[1-9]\\d*)?(\\.\\d+)?(?<=\\d)$")) {
                JOptionPane.showMessageDialog(this, "INVALID price", "Warning", JOptionPane.WARNING_MESSAGE);
            }else if (weight.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a weight", "Warning", JOptionPane.WARNING_MESSAGE);
            }else if (category.equals("Select")) {
                JOptionPane.showMessageDialog(this, "Please select a category", "Warning", JOptionPane.WARNING_MESSAGE);
            }else {
                try {
                    ResultSet resultSet = MySQL.executeSearch("SELECT * FROM `w_product` WHERE `name` = '"+productName+"' "
                            + "AND `price` = '"+price+"'");

                    if (resultSet.next()) {
                        JOptionPane.showMessageDialog(this, "Change product name or price to update", 
                                "Warning", JOptionPane.WARNING_MESSAGE);
                    }else {
                        MySQL.executeIUD("UPDATE `w_product` SET `name` = '"+productName+"', `price` = '"+price+"', "
                                + "`weight` = '"+weight+"', `category_id` = '"+categoryMap.get(category)+"' "
                                + "WHERE `id` = '"+id+"'");
                        loadProducts();
                        reset();
                        JOptionPane.showMessageDialog(this, "Product updated successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int row = productsTable.getSelectedRow();
        
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Please select a product to delete", "Warning", JOptionPane.WARNING_MESSAGE);
        }else {
            int showConfirmMessage = JOptionPane.showConfirmDialog(this, "Do you want to delete the selected product?", 
                    "Warning", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

            if (showConfirmMessage == JOptionPane.YES_OPTION) {
                String id = String.valueOf(productsTable.getValueAt(row, 0));
            
                try {
                    MySQL.executeIUD("DELETE FROM `w_product` WHERE `id` = '"+id+"'");
                    loadProducts();
                    reset();
                    JOptionPane.showMessageDialog(this, "Product deleted successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        reset();
    }//GEN-LAST:event_resetButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JComboBox<String> categoryComboBox;
    private javax.swing.JLabel closeLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField priceFormattedField;
    private javax.swing.JTextField productIDField;
    private javax.swing.JTextField productNameField;
    private javax.swing.JTable productsTable;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton updateButton;
    private javax.swing.JTextField weightField;
    // End of variables declaration//GEN-END:variables
}
