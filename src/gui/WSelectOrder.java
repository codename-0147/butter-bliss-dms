/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package gui;

import model.MySQL;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author barth
 */
public class WSelectOrder extends javax.swing.JDialog {
    private WInvoice invoice;
    private double total = 0;

    /**
     * Creates new form CompanyRegistration
     */
    public WSelectOrder(java.awt.Frame parent, boolean modal, WInvoice invoice) {
        super(parent, modal);
        this.invoice = invoice;
        initComponents();
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        pendingOrdersTable.setDefaultRenderer(Object.class, renderer);
        loadPendingOrders();
    }
    
    private void loadPendingOrders() {
        try {
            ResultSet resultSet = MySQL.executeSearch("SELECT * FROM `order` INNER JOIN `order_status` "
                    + "ON `order`.`order_status_id` = `order_status`.`id` INNER JOIN `outlet` "
                    + "ON `order`.`outlet_id` = `outlet`.`id` WHERE `order_status`.`name` = 'Pending'");
            DefaultTableModel model = (DefaultTableModel) pendingOrdersTable.getModel();
            model.setRowCount(0);
            
            while (resultSet.next()) {
                Vector<String> vector = new Vector<>();
                vector.add(resultSet.getString("order.id"));
                vector.add(resultSet.getString("outlet.name"));
                vector.add(resultSet.getString("order.date"));
                model.addRow(vector);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pendingOrdersTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Select Outlet");

        jPanel1.setBackground(new java.awt.Color(245, 219, 200));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(66, 45, 22));
        jLabel1.setText("Select Order");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        pendingOrdersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Outlet Name", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        pendingOrdersTable.getTableHeader().setReorderingAllowed(false);
        pendingOrdersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pendingOrdersTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(pendingOrdersTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void pendingOrdersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pendingOrdersTableMouseClicked
        //logger.log(Level.INFO, "MouseEvent");
        int row = pendingOrdersTable.getSelectedRow();
        
        if (evt.getClickCount() == 2) {
            try {
                if (invoice != null) {
                    invoice.getorderIDField().setText(String.valueOf(pendingOrdersTable.getValueAt(row, 0)));
                    invoice.getoutletNameLabel().setText(String.valueOf(pendingOrdersTable.getValueAt(row, 1)));
                    
                    ResultSet resultSet = MySQL.executeSearch("SELECT * FROM `order` INNER JOIN `order_items` "
                            + "ON `order`.`id` = `order_items`.`order_id` INNER JOIN `w_product` "
                            + "ON `order_items`.`w_product_id` = `w_product`.`id` "
                            + "WHERE `order`.`id` = '"+String.valueOf(pendingOrdersTable.getValueAt(row, 0))+"'");
                
                    DefaultTableModel model = (DefaultTableModel) invoice.getinvoiceItemTable().getModel();
                    model.setRowCount(0);
                    total = 0;

                    while (resultSet.next()) {
                        Vector<String> vector = new Vector<>();
                        vector.add(resultSet.getString("w_product.id"));
                        vector.add(resultSet.getString("w_product.name"));
                        vector.add(resultSet.getString("order_items.qty"));
                        vector.add(resultSet.getString("w_product.price"));
                        double itemTotal = Double.parseDouble(resultSet.getString("order_items.qty")) * Double.parseDouble(resultSet.getString("w_product.price"));
                        total += itemTotal;
                        vector.add(String.valueOf(itemTotal));
                        model.addRow(vector);
                    }
                    
                    invoice.gettotalLabel().setText(String.valueOf(total));
                    
                    this.dispose();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_pendingOrdersTableMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable pendingOrdersTable;
    // End of variables declaration//GEN-END:variables
}
