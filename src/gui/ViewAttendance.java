/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;


import java.time.DayOfWeek;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.temporal.ChronoUnit;
import java.util.stream.Stream;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.HashSet;
import java.util.Set;

/**
 *
 * @author Oshadha
 */
public class ViewAttendance extends javax.swing.JFrame {

    /**
     * Creates new form ViewAttendance
     */
    public ViewAttendance() {
        initComponents();
        loadAttendance();
        
        datechooserFrom.setDateFormatString("yyyy-MM-dd");
        datechooserto.setDateFormatString("yyyy-MM-dd");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        datechooserFrom = new com.toedter.calendar.JDateChooser();
        datechooserto = new com.toedter.calendar.JDateChooser();
        txtsearch = new javax.swing.JTextField();
        lon = new javax.swing.JLabel();
        From = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        presentlbl = new javax.swing.JLabel();
        absentlbl = new javax.swing.JLabel();
        lblpresent = new javax.swing.JLabel();
        lblabsent = new javax.swing.JLabel();
        ckemail = new javax.swing.JCheckBox();
        cknumber = new javax.swing.JCheckBox();
        ckfnic = new javax.swing.JCheckBox();
        btnreset = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 225));
        jPanel1.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                jPanel1ComponentShown(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(255, 236, 217));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        txtsearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtsearchActionPerformed(evt);
            }
        });

        lon.setText("From");

        From.setText("To");

        jLabel3.setText("Search");

        presentlbl.setText("Present");

        absentlbl.setText("Absent");

        lblpresent.setText("jLabel6");

        lblabsent.setText("jLabel7");

        ckemail.setText("Email");
        ckemail.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ckemailItemStateChanged(evt);
            }
        });

        cknumber.setText("Contact Number");
        cknumber.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cknumberItemStateChanged(evt);
            }
        });

        ckfnic.setText("NIC");
        ckfnic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ckfnicItemStateChanged(evt);
            }
        });

        btnreset.setText("Reset");
        btnreset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnresetActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 102, 0));
        jLabel1.setText("View Attendance");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(296, 296, 296)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(datechooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lon, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(datechooserto, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(From, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(125, 125, 125)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtsearch, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(presentlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(absentlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblpresent, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblabsent, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(23, 23, 23)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(ckemail, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(ckfnic, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                    .addGap(23, 23, 23)
                                    .addComponent(cknumber, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(btnreset, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 880, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel1)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(lon)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(From)
                        .addGap(15, 15, 15))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(datechooserFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datechooserto, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtsearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(presentlbl)
                            .addComponent(lblpresent))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(absentlbl)
                            .addComponent(lblabsent))
                        .addGap(36, 36, 36)
                        .addComponent(ckemail)
                        .addGap(18, 18, 18)
                        .addComponent(ckfnic)
                        .addGap(18, 18, 18)
                        .addComponent(cknumber)
                        .addGap(36, 36, 36)
                        .addComponent(btnreset, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtsearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtsearchActionPerformed
        
    }//GEN-LAST:event_txtsearchActionPerformed

    private void btnresetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnresetActionPerformed
       txtsearch.setText("");
       datechooserFrom.setDate(null);
       datechooserto.setDate(null);
       ckemail.setSelected(false);
       ckfnic.setSelected(false);
       cknumber.setSelected(false);
       
       loadAttendance();
       
 
    }//GEN-LAST:event_btnresetActionPerformed

    private void jPanel1ComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_jPanel1ComponentShown
        loadAttendance();
    }//GEN-LAST:event_jPanel1ComponentShown

    private void ckemailItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ckemailItemStateChanged
        loadAttendance();
    }//GEN-LAST:event_ckemailItemStateChanged

    private void ckfnicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ckfnicItemStateChanged
        loadAttendance();
    }//GEN-LAST:event_ckfnicItemStateChanged

    private void cknumberItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cknumberItemStateChanged
        loadAttendance();
    }//GEN-LAST:event_cknumberItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel From;
    private javax.swing.JLabel absentlbl;
    private javax.swing.JButton btnreset;
    private javax.swing.JCheckBox ckemail;
    private javax.swing.JCheckBox ckfnic;
    private javax.swing.JCheckBox cknumber;
    private com.toedter.calendar.JDateChooser datechooserFrom;
    private com.toedter.calendar.JDateChooser datechooserto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblabsent;
    private javax.swing.JLabel lblpresent;
    private javax.swing.JLabel lon;
    private javax.swing.JLabel presentlbl;
    private javax.swing.JTextField txtsearch;
    // End of variables declaration//GEN-END:variables
private void loadAttendance() {
    List<String> columns = new ArrayList<>(Arrays.asList("id", "date", "check_in", "check_out", "employee.name", "workduration"));

    String searchText = txtsearch.getText().toString();
    
    Date fromDateFromCal = datechooserFrom.getDate();
    LocalDate fromDate = null;
    if (fromDateFromCal != null) {
        fromDate = fromDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }

    Date toDateFromCal = datechooserto.getDate();
    LocalDate toDate = null;
    if (toDateFromCal != null) {
        toDate = toDateFromCal.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
    }

    Long daysBetween = null;
    if (fromDate != null && toDate != null) {
        daysBetween = countWeekdays(fromDate, toDate);
    }
    
    Boolean contactIncluded = cknumber.isSelected();
    Boolean emailck = ckemail.isSelected();
    Boolean nic = ckfnic.isSelected();
    
    String sqlQuery = "SELECT ep.id, ep.f_name, ep.email, date,ep.mobile, check_in, check_out, workduration";
    if (contactIncluded) {
        columns.add("Contact");
        sqlQuery += ", ep.mobile";
    }
        
    if (emailck) {
        columns.add("Email");   
        sqlQuery += ", ep.email";
    }
        
    if (nic) {
        columns.add("NIC");
        sqlQuery += ", ep.nic";
    }
        
    sqlQuery += " FROM employee AS ep INNER JOIN attendance AS at ON ep.id = at.employee_id";
    if (searchText != null && !searchText.isEmpty()) {
        sqlQuery += " WHERE (ep.f_name LIKE '%" + searchText + "%' OR ep.email LIKE '%" + searchText + "%')";
        if (fromDate != null && toDate != null) {
            sqlQuery += " AND at.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";
        } else if (fromDate != null) {
            sqlQuery += " AND at.date = '" + fromDate + "'";
        }
    } else {
        if (fromDate != null && toDate != null) {
            sqlQuery += " WHERE at.date BETWEEN '" + fromDate + "' AND '" + toDate + "'";
        } else if (fromDate != null) {
            sqlQuery += " WHERE at.date = '" + fromDate + "'";
        }
    }
        
    DefaultTableModel model = new DefaultTableModel();
    model.setColumnIdentifiers(columns.toArray());
    jTable1.setModel(model);
            
    try {
        Connection connection = DatabaseConnection.getConnection();
        Statement st = connection.createStatement();
        ResultSet rs = st.executeQuery(sqlQuery);
        Long presentCount = 1L;
        Long absentCount = 1L;
        Set<String> emailList = new HashSet<>();
        while (rs.next()) {
            List<Object> row = new ArrayList<>();
            row.add(rs.getString("id"));
            row.add(rs.getString("date"));
             row.add(rs.getString("check_in"));
            row.add(rs.getString("check_out"));
            row.add(rs.getString("f_name"));
             row.add(rs.getString("workduration"));
          //  row.add(rs.getString("mobile"));
          //  row.add(rs.getString("email"));
            emailList.add(rs.getString("email"));
           
           
           
            if (contactIncluded) {
                row.add(rs.getString("mobile"));
            }
            if (nic) {
                row.add(rs.getString("nic"));
            }
            if (emailck) {
                row.add(rs.getString("email"));
            }
            if (rs.getString("check_out") == null) {
                absentCount++;
            } else {
                presentCount++;
            }
            model.addRow(row.toArray());
        }
                
        if (emailList.size() == 1) {
            presentlbl.setVisible(true);
            absentlbl.setVisible(true);
            lblpresent.setVisible(true);
            lblabsent.setVisible(true);
            presentlbl.setText(presentCount.toString());
            if (daysBetween != null && daysBetween > 0) {
                absentCount = daysBetween - presentCount;
            }
            absentlbl.setText(absentCount.toString());
        } else {
            presentlbl.setVisible(false);
            absentlbl.setVisible(false);
            lblpresent.setVisible(false);
            lblabsent.setVisible(false);
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
}

 

    private Long countWeekdays(LocalDate start, LocalDate end) {
    long count = 0;
    LocalDate date = start;
    while (date.isBefore(end) || date.equals(end)) {
        if (!(date.getDayOfWeek() == DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY)) {
            count++;
        }
        date = date.plusDays(1);
    }
    return count;
}

  /*  private Long countWeekdays(LocalDate start, LocalDate end){
        long count = 0;
        LocalDate date = start;
        while (date.isBefore(end) || date.equals(end)) {
            if (!(date.getDayOfWeek() == DayOfWeek.SATURDAY || date.getDayOfWeek() == DayOfWeek.SUNDAY)) {
                count++;
                
            }
            date = date.plusDays(1);
            
        }
        return count;
    }*/
}
