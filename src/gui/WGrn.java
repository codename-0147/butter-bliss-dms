/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import java.awt.Color;
import java.awt.Frame;
import java.io.File;
import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import model.MySQL;
import java.sql.ResultSet;
import javax.swing.JFormattedTextField;
import model.WGrnItem;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.data.JRTableModelDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author barth
 */
public class WGrn extends javax.swing.JPanel {
    private WHome home;
    HashMap<String, WGrnItem> wGrnItemMap = new HashMap<>();

    /**
     * Creates new form WGrn
     */
    public WGrn(WHome home) {
        initComponents();
        this.home = home;
        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer();
        renderer.setHorizontalAlignment(SwingConstants.CENTER);
        grnItemTable.setDefaultRenderer(Object.class, renderer);
        generateGRNId();
    }
    
    private void generateGRNId() {
        long id = System.currentTimeMillis();
        grnIDField.setText(String.valueOf(id));
    }
    
    public JTextField getSupplierIDField() {
        return supplierIDField;
    }
    
    public JLabel getSupplierNameLabel() {
        return supplierNameLabel;
    }
    
    public JTextField getProductIDField() {
        return productIDField;
    }
    
    public JLabel getProductWeightLabel() {
        return productWeightLabel;
    }
    
    public JLabel getProductNameLabel() {
        return productNameLabel;
    }
    
    public JFormattedTextField getSellingPriceFormattedField() {
        return sellingPriceFormattedField;
    }
    
    public JFormattedTextField getPaymentFormattedField() {
        return paymentFormattedField;
    }
    
    private void loadGrnItems() {
        DefaultTableModel model = (DefaultTableModel) grnItemTable.getModel();
        model.setRowCount(0);
        double total = 0;
        
        for (WGrnItem grnItem : wGrnItemMap.values()) {
            Vector<String> vector = new Vector<>();
            vector.add(grnItem.getProductId());
            vector.add(grnItem.getProductName());
            vector.add(grnItem.getProductWeight());
            vector.add(String.valueOf(grnItem.getQty()));
            vector.add(String.valueOf(grnItem.getBuyingPrice()));
            vector.add(String.valueOf(grnItem.getSellingPrice()));
            vector.add(String.valueOf(grnItem.getMfd()));
            vector.add(String.valueOf(grnItem.getExp()));
            double itemTotal = grnItem.getQty() * grnItem.getBuyingPrice();
            total += itemTotal;
            vector.add(String.valueOf(itemTotal));
            model.addRow(vector);
        }
        
        if (supplierNameLabel.getText().equals("Production Dep")) {
            totalLabel.setText("0.00");
        }else if (typeComboBox.getSelectedItem().equals("Return Stock")) {
            totalLabel.setText("0.00");
        }else {
            totalLabel.setText(String.valueOf(total));
        }
    }

    private void reset() {
        generateGRNId();
        supplierIDField.setText("");
        supplierNameLabel.setText("SUPPLIER NAME");
        productIDField.setText("");
        qtyFormattedField.setText("0");
        productWeightLabel.setText("PRODUCT WEIGHT");
        productNameLabel.setText("PRODUCT NAME");
        buyingPriceFormattedField.setText("0");
        sellingPriceFormattedField.setText("0");
        mfdDateChooser.setDate(null);
        expDateChooser.setDate(null);
        DefaultTableModel model = (DefaultTableModel)grnItemTable.getModel();
        model.setRowCount(0);
        totalLabel.setText("0.00");
        paymentFormattedField.setText("0");
        balanceLabel.setText("0.00");
        paymentFormattedField.setEnabled(true);
        typeComboBox.setSelectedIndex(0);
        wGrnItemMap.clear();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        wSupervisorIDField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        grnIDField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        supplierIDField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        productIDField = new javax.swing.JTextField();
        selectSupplierButton = new javax.swing.JButton();
        supplierNameLabel = new javax.swing.JLabel();
        selectProductButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        productWeightLabel = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        productNameLabel = new javax.swing.JLabel();
        closeLabel = new javax.swing.JLabel();
        buyingPriceFormattedField = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        sellingPriceFormattedField = new javax.swing.JFormattedTextField();
        mfdDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        expDateChooser = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        qtyFormattedField = new javax.swing.JFormattedTextField();
        jLabel18 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        grnItemTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();
        paymentFormattedField = new javax.swing.JFormattedTextField();
        jLabel20 = new javax.swing.JLabel();
        balanceLabel = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        saveNPrintButton = new javax.swing.JButton();
        typeComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel2.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(66, 45, 22));
        jLabel2.setText("GRN");

        wSupervisorIDField.setEditable(false);
        wSupervisorIDField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel12.setText("W. Supervisor ID :");

        jLabel13.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel13.setText("GRN ID :");

        grnIDField.setEditable(false);
        grnIDField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel14.setText("Supplier Mobile :");

        supplierIDField.setEditable(false);
        supplierIDField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel15.setText("Product ID :");

        productIDField.setEditable(false);
        productIDField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        selectSupplierButton.setBackground(new java.awt.Color(245, 219, 200));
        selectSupplierButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        selectSupplierButton.setForeground(new java.awt.Color(0, 0, 0));
        selectSupplierButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/select-icon.png"))); // NOI18N
        selectSupplierButton.setText("Supplier");
        selectSupplierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSupplierButtonActionPerformed(evt);
            }
        });

        supplierNameLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        supplierNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        supplierNameLabel.setText("SUPPLIER NAME");
        supplierNameLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(252, 171, 77)));

        selectProductButton.setBackground(new java.awt.Color(245, 219, 200));
        selectProductButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        selectProductButton.setForeground(new java.awt.Color(0, 0, 0));
        selectProductButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/select-icon.png"))); // NOI18N
        selectProductButton.setText("Product");
        selectProductButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectProductButtonActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel16.setText("Weight :");

        productWeightLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        productWeightLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        productWeightLabel.setText("PRODUCT WEIGHT");
        productWeightLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(252, 171, 77)));

        jLabel17.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel17.setText("Product :");

        productNameLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        productNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        productNameLabel.setText("PRODUCT NAME");
        productNameLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(252, 171, 77)));

        closeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/close-icon.png"))); // NOI18N
        closeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeLabelMouseClicked(evt);
            }
        });

        buyingPriceFormattedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        buyingPriceFormattedField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        buyingPriceFormattedField.setText("0");
        buyingPriceFormattedField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel5.setText("Buying Price :");

        jLabel6.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel6.setText("Selling Price :");

        sellingPriceFormattedField.setEditable(false);
        sellingPriceFormattedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        sellingPriceFormattedField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        sellingPriceFormattedField.setText("0");
        sellingPriceFormattedField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel7.setText("MFD :");

        jLabel8.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel8.setText("EXP :");

        resetButton.setBackground(new java.awt.Color(245, 219, 200));
        resetButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        resetButton.setForeground(new java.awt.Color(0, 0, 0));
        resetButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/reset-icon.png"))); // NOI18N
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        addButton.setBackground(new java.awt.Color(245, 219, 200));
        addButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        addButton.setForeground(new java.awt.Color(0, 0, 0));
        addButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/add-icon.png"))); // NOI18N
        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        qtyFormattedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        qtyFormattedField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        qtyFormattedField.setText("0");
        qtyFormattedField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N

        jLabel18.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel18.setText("Quantity :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(selectSupplierButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(supplierNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel12)
                                .addComponent(jLabel13))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(grnIDField, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                .addComponent(wSupervisorIDField)))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addComponent(jLabel14)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(supplierIDField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(closeLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(qtyFormattedField)
                            .addComponent(productIDField)
                            .addComponent(productWeightLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(productNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                            .addComponent(selectProductButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addComponent(addButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetButton))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sellingPriceFormattedField)
                                    .addComponent(buyingPriceFormattedField)
                                    .addComponent(mfdDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(expDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(closeLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(wSupervisorIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(productIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buyingPriceFormattedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(grnIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectProductButton)
                    .addComponent(sellingPriceFormattedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel14)
                        .addComponent(supplierIDField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel16)
                        .addComponent(productWeightLabel)
                        .addComponent(jLabel7))
                    .addComponent(mfdDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(productNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qtyFormattedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(selectSupplierButton)
                        .addComponent(supplierNameLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(expDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(resetButton)
                            .addComponent(addButton))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        grnItemTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Product Weight", "Quantity", "Buying Price", "Selling Price", "MFD", "EXP", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        grnItemTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(grnItemTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel19.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel19.setText("Total :");

        totalLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        totalLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        totalLabel.setText("0.00");
        totalLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(252, 171, 77)));

        paymentFormattedField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        paymentFormattedField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        paymentFormattedField.setText("0");
        paymentFormattedField.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        paymentFormattedField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                paymentFormattedFieldKeyReleased(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel20.setText("Payment :");

        balanceLabel.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        balanceLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        balanceLabel.setText("0.00");
        balanceLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(252, 171, 77)));

        jLabel21.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel21.setText("Balance :");

        saveNPrintButton.setBackground(new java.awt.Color(245, 219, 200));
        saveNPrintButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        saveNPrintButton.setForeground(new java.awt.Color(0, 0, 0));
        saveNPrintButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/print-icon.png"))); // NOI18N
        saveNPrintButton.setText("Save & Print");
        saveNPrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNPrintButtonActionPerformed(evt);
            }
        });

        typeComboBox.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        typeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "New Stock", "Return Stock", " " }));
        typeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                typeComboBoxItemStateChanged(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        jLabel1.setText("Type :");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel21)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(73, 73, 73)
                                .addComponent(jLabel19))
                            .addComponent(jLabel20))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(balanceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(paymentFormattedField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(totalLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(saveNPrintButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(totalLabel)
                    .addComponent(typeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentFormattedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(balanceLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveNPrintButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseClicked
        this.home.removeGrn();
    }//GEN-LAST:event_closeLabelMouseClicked

    private void selectSupplierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSupplierButtonActionPerformed
        SelectSupplier selectSupplier = new SelectSupplier((Frame) SwingUtilities.getWindowAncestor(this), true, this);
        selectSupplier.setVisible(true);
    }//GEN-LAST:event_selectSupplierButtonActionPerformed

    private void selectProductButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectProductButtonActionPerformed
        SelectProduct selectProduct = new SelectProduct((Frame) SwingUtilities.getWindowAncestor(this), true, this);
        selectProduct.setVisible(true);
    }//GEN-LAST:event_selectProductButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        String supplierMobile = supplierIDField.getText();
        String productID = productIDField.getText();
        String qty  = qtyFormattedField.getText();
        String buying_price = buyingPriceFormattedField.getText();
        String selling_price = sellingPriceFormattedField.getText();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date mfd = mfdDateChooser.getDate();
        Date exp = expDateChooser.getDate();

        if (supplierMobile.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a supplier", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (productID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select a product", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (qty.equals("0")) {
            JOptionPane.showMessageDialog(this, "Please enter a quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (qty.equals("0.00")) {
            JOptionPane.showMessageDialog(this, "Please enter a quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (qty.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (!qty.matches("^\\d+(\\.\\d{1,2})?$")) {
            JOptionPane.showMessageDialog(this, "INVALID quantity", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (buying_price.equals("0")) {
            JOptionPane.showMessageDialog(this, "Please enter a buying price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (buying_price.equals("0.00")) {
            JOptionPane.showMessageDialog(this, "Please enter a buying price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (buying_price.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a buying price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (!buying_price.matches("^(0|[1-9]\\d*)?(\\.\\d+)?(?<=\\d)$")) {
            JOptionPane.showMessageDialog(this, "INVALID buying price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (selling_price.equals("0")) {
            JOptionPane.showMessageDialog(this, "Please enter a selling price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (selling_price.equals("0.00")) {
            JOptionPane.showMessageDialog(this, "Please enter a selling price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (selling_price.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a selling price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (!selling_price.matches("^(0|[1-9]\\d*)?(\\.\\d+)?(?<=\\d)$")) {
            JOptionPane.showMessageDialog(this, "INVALID selling price", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (mfd == null) {
            JOptionPane.showMessageDialog(this, "Please enter a MFD", "Warning", JOptionPane.WARNING_MESSAGE);
        }else if (exp == null) {
            JOptionPane.showMessageDialog(this, "Please enter a EXP", "Warning", JOptionPane.WARNING_MESSAGE);
        }else {
            WGrnItem grnItem = new WGrnItem();
            grnItem.setProductId(productIDField.getText());
            grnItem.setProductWeight(productWeightLabel.getText());
            grnItem.setProductName(productNameLabel.getText());
            grnItem.setQty(Double.parseDouble(qty));
            grnItem.setBuyingPrice(Double.parseDouble(buying_price));
            grnItem.setSellingPrice(Double.parseDouble(selling_price));
            grnItem.setMfd(sdf.format(mfd));
            grnItem.setExp(sdf.format(exp));

            if (wGrnItemMap.get(productIDField.getText()) == null) {
                wGrnItemMap.put(productIDField.getText(), grnItem);
                loadGrnItems();
            }else {
                WGrnItem found = wGrnItemMap.get(productIDField.getText());

                if (found.getExp().compareTo(sdf.format(exp)) == 0
                    && found.getMfd().compareTo(sdf.format(mfd)) == 0
                    && found.getBuyingPrice() == Double.parseDouble(buying_price)
                    && found.getSellingPrice() == Double.parseDouble(selling_price)) {
                    found.setQty(found.getQty() + Double.parseDouble(qty));
                    loadGrnItems();
                }else {
                    JOptionPane.showMessageDialog(this, "This GRN item already exists with different dates and prices",
                        "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        
        productIDField.setText("");
        qtyFormattedField.setText("0");
        productWeightLabel.setText("PRODUCT WEIGHT");
        productNameLabel.setText("PRODUCT NAME");
        buyingPriceFormattedField.setText("0");
        sellingPriceFormattedField.setText("0");
        mfdDateChooser.setDate(null);
        expDateChooser.setDate(null);
    }//GEN-LAST:event_addButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        reset();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void paymentFormattedFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_paymentFormattedFieldKeyReleased
        String total = totalLabel.getText();
        String payment = paymentFormattedField.getText();
        
        if (payment.isEmpty()) {
            payment = "0";
        }else if (!payment.matches("^(0|[1-9]\\d*)?(\\.\\d+)?(?<=\\d)$")) {
            balanceLabel.setText("INVALID");
            balanceLabel.setForeground(Color.red);
        }else {
            double balance = Double.parseDouble(payment) - Double.parseDouble(total);
            balanceLabel.setText(String.valueOf(balance));
            balanceLabel.setForeground(Color.white);
        }
    }//GEN-LAST:event_paymentFormattedFieldKeyReleased

    private void saveNPrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveNPrintButtonActionPerformed
        try {
            ResultSet resultSet = MySQL.executeSearch("SELECT * FROM `grn` WHERE `id` = '"+grnIDField.getText()+"'");
            
            if (resultSet.next()) {
                JOptionPane.showMessageDialog(this, "This grn already exists", "Warning", JOptionPane.WARNING_MESSAGE);
            }else {
                String grnId = grnIDField.getText();
                String supplierID = supplierIDField.getText();
                String wSupervisorID = wSupervisorIDField.getText();
                String dateTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());
                String paidAmount = paymentFormattedField.getText();
                //SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                int rowCount = grnItemTable.getRowCount();

                if (rowCount == 0) {
                    JOptionPane.showMessageDialog(this, "Please add GRN item(s) to GRN", "Warning", JOptionPane.WARNING_MESSAGE);
                }else if (typeComboBox.getSelectedItem().equals("New Stock")) {
                    MySQL.executeIUD("INSERT INTO `w_grn` VALUES('"+grnId+"', '"+supplierID+"', '"+dateTime+"', "
                        + "'"+wSupervisorID+"', '"+paidAmount+"', 1)");

                    for (WGrnItem grnItem : wGrnItemMap.values()) {
                        ResultSet resultSet1 = MySQL.executeSearch("SELECT * FROM `w_stock` WHERE "
                                + "`w_product_id` = '"+grnItem.getProductId()+"' AND "
                                + "`price` = '"+grnItem.getSellingPrice()+"' AND "
                                + "`mfd` = '"+grnItem.getMfd()+"' AND "
                                + "`exp` = '"+grnItem.getExp()+"'");
                        String stockID = "";

                        if (resultSet1.next()) {
                            stockID = resultSet1.getString("id");
                            String currentQty = resultSet1.getString("qty");
                            String updatedQty = String.valueOf(Double.parseDouble(currentQty) + grnItem.getQty());
                            MySQL.executeIUD("UPDATE `w_stock` SET `qty` = '"+updatedQty+"' WHERE `id` = '"+stockID+"'");
                        }else {
                            MySQL.executeIUD("INSERT INTO `w_stock`(`price`, `qty`, `mfd`, `exp`, `w_product_id`, "
                                    + "`w_stock_status_id`) VALUES('"+grnItem.getSellingPrice()+"', '"+grnItem.getQty()+"', "
                                    + "'"+grnItem.getMfd()+"', '"+grnItem.getExp()+"', "
                                    + "'"+grnItem.getProductId()+"', 1)");

                            ResultSet resultSet2 = MySQL.executeSearch("SELECT * FROM `w_stock` WHERE "
                                    + "`w_product_id` = '"+grnItem.getProductId()+"' AND "
                                    + "`price` = '"+grnItem.getSellingPrice()+"' AND "
                                    + "`mfd` = '"+grnItem.getMfd()+"' AND "
                                    + "`exp` = '"+grnItem.getExp()+"'");

                            if (resultSet2.next()) {
                                stockID = resultSet2.getString("id");
                            }
                        }

                        MySQL.executeIUD("INSERT INTO `w_grn_item`(`w_grn_id`, `qty`, `price`, `w_stock_id`) "
                                + "VALUES('"+grnId+"', '"+grnItem.getQty()+"', '"+grnItem.getBuyingPrice()+"', '"+stockID+"')");
                    }

                    InputStream path = this.getClass().getResourceAsStream("/reports/bb_w_grn.jasper");
                    HashMap<String, Object> parameters = new HashMap<>();
                    parameters.put("Parameter1", wSupervisorIDField.getText());
                    parameters.put("Parameter2", grnIDField.getText());
                    parameters.put("Parameter3", supplierIDField.getText());
                    parameters.put("Parameter4", dateTime);
                    parameters.put("Parameter5", totalLabel.getText());
                    parameters.put("Parameter6", paymentFormattedField.getText());
                    parameters.put("Parameter7", balanceLabel.getText());

                    String appDir = new File("").getAbsolutePath(); // Get the application's directory
                    String reportsFolder = appDir + File.separator + "ExportedReports"; // Main folder path
                    // Create the main "ExportedReports" folder if it doesn't exist
                    File mainDirectory = new File(reportsFolder);
                    if (!mainDirectory.exists()) {
                        mainDirectory.mkdirs();
                    }
                    // Create subfolder for "Warehouse Grn Reports" if it doesn't exist
                    String grnReportsFolder = reportsFolder + File.separator + "Warehouse Grn Reports";
                    File grnDirectory = new File(grnReportsFolder);
                    if (!grnDirectory.exists()) {
                        grnDirectory.mkdirs();
                    }
                    // Path to export the PDF file (inside "Warehouse Grn Reports" subfolder)
                    String outputPath = grnReportsFolder + File.separator + "Warehouse_Grn_report_" + grnId + ".pdf";

                    JRTableModelDataSource dataSource = new JRTableModelDataSource(grnItemTable.getModel());
                    JasperPrint report = JasperFillManager.fillReport(path, parameters, dataSource);
                    JasperViewer.viewReport(report, false);
                    JasperPrintManager.printReport(report, false);
                    JasperExportManager.exportReportToPdfFile(report, outputPath);
                    reset();
                }else if (typeComboBox.getSelectedItem().equals("Return Stock")) {
                    if (supplierNameLabel.getText().equals("Production Dep")) {
                        JOptionPane.showMessageDialog(this, "Invalid Supplier", "Warning", JOptionPane.WARNING_MESSAGE);
                    }else {
                        MySQL.executeIUD("INSERT INTO `w_grn` VALUES('"+grnId+"', '"+supplierID+"', '"+dateTime+"', "
                        + "'"+wSupervisorID+"', '"+paidAmount+"')");

                        for (WGrnItem grnItem : wGrnItemMap.values()) {
                            String stockID = "";

                            MySQL.executeIUD("INSERT INTO `w_stock`(`price`, `qty`, `mfd`, `exp`, `product_id`) "
                                    + "VALUES('"+grnItem.getSellingPrice()+"', '"+grnItem.getQty()+"', "
                                    + "'"+grnItem.getMfd()+"', '"+grnItem.getExp()+"', "
                                    + "'"+grnItem.getProductId()+"')");

                            ResultSet resultSet1 = MySQL.executeSearch("SELECT * FROM `w_stock` WHERE "
                                    + "`product_id` = '"+grnItem.getProductId()+"' AND "
                                    + "`price` = '"+grnItem.getSellingPrice()+"' AND "
                                    + "`mfd` = '"+grnItem.getMfd()+"' AND "
                                    + "`exp` = '"+grnItem.getExp()+"'");

                            if (resultSet1.next()) {
                                stockID = resultSet1.getString("id");
                            }

                            MySQL.executeIUD("INSERT INTO `w_grn_item`(`w_grn_id`, `qty`, `price`, `w_stock_id`) "
                                    + "VALUES('"+grnId+"', '"+grnItem.getQty()+"', '"+grnItem.getBuyingPrice()+"', "
                                            + "'"+stockID+"')");
                            
                            ResultSet resultSet2 = MySQL.executeSearch("SELECT * FROM `returning_stock` "
                                    + "INNER JOIN `w_stock` ON `returning_stock`.`w_stock_id` = `w_stock`.`id` "
                                    + "INNER JOIN `w_grn_item` ON `w_stock`.`id` = `w_grn_item`.`w_stock_id` "
                                    + "INNER JOIN `w_grn` ON `w_grn_item`.`w_grn_id` = `w_grn`.`id` "
                                    + "INNER JOIN `supplier` ON `w_grn`.`supplier_id` = `supplier`.`id` "
                                    + "INNER JOIN `w_product` ON `w_stock`.`w_product_id` = `w_product`.`id` "
                                    + "INNER JOIN `supplier_return_invoice_item` "
                                    + "ON `supplier_return_invoice_item.`returning_stock_id` = `returning_stock`.`id` "
                                    + "INNER JOIN `supplier_return_invoice` "
                                    + "ON `supplier_return_invoice_item`.`supplier_return_invoice_id` = "
                                    + "`supplier_return_invoice`.`id` "
                                    + "WHERE `returning_stock`.`qty` = '"+grnItem.getQty()+"' "
                                    + "AND `w_grn_item`.`price` = '"+grnItem.getBuyingPrice()+"' "
                                    + "AND `supplier`.`id` = '"+supplierID+"' "
                                    + "AND `w_product`.`id` = '"+grnItem.getProductId()+"'");
                            
                            if (resultSet2.next()) {
                                MySQL.executeIUD("UPDATE `returning_stock` SET `returning_stock_status_id` = 2 "
                                        + "WHERE `returning_stock`.`id` = '"+resultSet2.getString("returning_stock.id")+"'");
                                
                                MySQL.executeIUD("UPDATE `supplier_return_invoice` "
                                        + "SET `supplier_return_invoice_status_id` = 2 "
                                        + "WHERE `supplier_return_invoice`.`id` = "
                                        + "'"+resultSet2.getString("supplier_return_invoice.id")+"'");
                            }
                        }

                        InputStream path = this.getClass().getResourceAsStream("/reports/bb_w_grn.jasper");
                        HashMap<String, Object> parameters = new HashMap<>();
                        parameters.put("Parameter1", wSupervisorIDField.getText());
                        parameters.put("Parameter2", grnIDField.getText());
                        parameters.put("Parameter3", supplierIDField.getText());
                        parameters.put("Parameter4", dateTime);
                        parameters.put("Parameter5", totalLabel.getText());
                        parameters.put("Parameter6", paymentFormattedField.getText());
                        parameters.put("Parameter7", balanceLabel.getText());

                        String appDir = new File("").getAbsolutePath(); // Get the application's directory
                        String reportsFolder = appDir + File.separator + "ExportedReports"; // Main folder path
                        // Create the main "ExportedReports" folder if it doesn't exist
                        File mainDirectory = new File(reportsFolder);
                        if (!mainDirectory.exists()) {
                            mainDirectory.mkdirs();
                        }
                        // Create subfolder for "Warehouse Grn Reports" if it doesn't exist
                        String grnReportsFolder = reportsFolder + File.separator + "Warehouse Grn Reports";
                        File grnDirectory = new File(grnReportsFolder);
                        if (!grnDirectory.exists()) {
                            grnDirectory.mkdirs();
                        }
                        // Path to export the PDF file (inside "Warehouse Grn Reports" subfolder)
                        String outputPath = grnReportsFolder + File.separator + "Warehouse_Grn_report_" + grnId + ".pdf";

                        JRTableModelDataSource dataSource = new JRTableModelDataSource(grnItemTable.getModel());
                        JasperPrint report = JasperFillManager.fillReport(path, parameters, dataSource);
                        JasperViewer.viewReport(report, false);
                        JasperPrintManager.printReport(report, false);
                        JasperExportManager.exportReportToPdfFile(report, outputPath);
                        reset();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            //logger.log(Level.WARNING, "Exception", e);
        }
    }//GEN-LAST:event_saveNPrintButtonActionPerformed

    private void typeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_typeComboBoxItemStateChanged
        if (typeComboBox.getSelectedItem().equals("New Stock")) {
            if (supplierNameLabel.getText().equals("Production Dep")) {
                getPaymentFormattedField().setEnabled(false);
            }else {
                getPaymentFormattedField().setEnabled(true);
            }
        }else if (typeComboBox.getSelectedItem().equals("Return Stock")) {
            getPaymentFormattedField().setEnabled(false);
        }
    }//GEN-LAST:event_typeComboBoxItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel balanceLabel;
    private javax.swing.JFormattedTextField buyingPriceFormattedField;
    private javax.swing.JLabel closeLabel;
    private com.toedter.calendar.JDateChooser expDateChooser;
    private javax.swing.JTextField grnIDField;
    private javax.swing.JTable grnItemTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser mfdDateChooser;
    private javax.swing.JFormattedTextField paymentFormattedField;
    private javax.swing.JTextField productIDField;
    private javax.swing.JLabel productNameLabel;
    private javax.swing.JLabel productWeightLabel;
    private javax.swing.JFormattedTextField qtyFormattedField;
    private javax.swing.JButton resetButton;
    private javax.swing.JButton saveNPrintButton;
    private javax.swing.JButton selectProductButton;
    private javax.swing.JButton selectSupplierButton;
    private javax.swing.JFormattedTextField sellingPriceFormattedField;
    private javax.swing.JTextField supplierIDField;
    private javax.swing.JLabel supplierNameLabel;
    private javax.swing.JLabel totalLabel;
    private javax.swing.JComboBox<String> typeComboBox;
    private javax.swing.JTextField wSupervisorIDField;
    // End of variables declaration//GEN-END:variables
}
