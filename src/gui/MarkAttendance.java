
package gui;

import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamPanel;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
//import com.mysql.cj.xdevapi.Result;
import java.awt.Dimension;
import java.awt.image.BufferedImage;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import com.google.zxing.Result;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.geom.Ellipse2D;
import java.io.File;
import javax.swing.Timer;
import model.Utility;
import java.sql.*;
import model.MySQL;
import java.sql.ResultSet;
import java.time.Duration;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.sql.PreparedStatement;

/**
 *
 * @author Oshadha
 */
public class MarkAttendance extends javax.swing.JFrame implements Runnable, ThreadFactory {

    private WebcamPanel panel = null;
    private Webcam webcam = null;
    private ExecutorService executor = Executors.newSingleThreadExecutor(this);
    private volatile boolean running = true;
    // private  Map<String, String> resultMap = new HashMap<String, String>();

    /**
     * Creates new form MarkAttendance
     */
    public MarkAttendance() {
        initComponents();
        initWebcam();

        Timer timer = new Timer(1, e -> updateTime());
        timer.start();
    }

    private void updateTime() {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
        jLabel4.setText(simpleDateFormat.format(new Date()));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField3 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabeldate = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblname = new javax.swing.JLabel();
        lblCheckInCheckout = new javax.swing.JLabel();
        lblImage = new javax.swing.JLabel();

        jTextField3.setText("jTextField3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(245, 219, 200));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 340, 270));

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 1, 36)); // NOI18N
        jLabel1.setText("Mark Attendance");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 298, 68));

        jLabeldate.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabeldate.setText("Date");
        jPanel1.add(jLabeldate, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 6, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel4.setText("Time");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(451, 58, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 1, 14)); // NOI18N
        jLabel5.setText("Time");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(566, 6, -1, -1));
        jPanel1.add(lblname, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 290, 100, -1));
        jPanel1.add(lblCheckInCheckout, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 330, 87, -1));

        lblImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblImageMouseClicked(evt);
            }
        });
        jPanel1.add(lblImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 80, 270, 210));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 784, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void lblImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblImageMouseClicked
        /*     JFileChooser fileChooser = new  JFileChooser();
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            try {
                originalImage = ImageIO.read(selectedFile);

                int originalWidth = originalImage.getWidth();
                int originalHeight = originalImage.getHeight();

                int labelWidth = lblImage.getWidth();
                int labelHeight = lblImage.getHeight();

                double scaleX = (double) labelWidth/originalWidth;
                double scaleY = (double) labelHeight/originalHeight;

                double scale = Math.min(scaleX, scaleY);

                int scaledWidth = (int) (originalWidth * scale);
                int scaledHeight = (int) (originalHeight * scale);

                Image scaledImage = originalImage.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);

                ImageIcon icon = new ImageIcon(scaledImage);
                lblImage.setIcon(icon);

            } catch (Exception e) {
                e.printStackTrace();
            }

        }*/
    }//GEN-LAST:event_lblImageMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MarkAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MarkAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabeldate;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JLabel lblCheckInCheckout;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblname;
    // End of variables declaration//GEN-END:variables

    Map<String, String> resultMap = new HashMap<String, String>();

    @Override
    public void run() {
        do {
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {

            }

            try {
                Result result = null;
                BufferedImage image = null;
                if (webcam.isOpen()) {
                    if ((image = webcam.getImage()) == null) {
                        continue;

                    }

                }
                LuminanceSource source = new BufferedImageLuminanceSource(image);
                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));

                try {
                    result = new MultiFormatReader().decode(bitmap);
                } catch (NotFoundException e) {

                }

                if (result != null) {
                    String jsonString = result.getText();
                    Gson gson = new Gson();
                    java.lang.reflect.Type type = new TypeToken<Map<String, String>>() {

                    }.getType();
                    resultMap = gson.fromJson(jsonString, type);

                    String finalPath = Utility.getPath("images\\" + resultMap.get("email") + ".jpg");
                    CircularImageFrame(finalPath);

                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        } while (running);
    }

    private void initWebcam() {
        webcam = Webcam.getDefault();
        if (webcam != null) {
            Dimension[] resolution = webcam.getViewSizes();
            Dimension maxResolution = resolution[resolution.length - 1];

            if (webcam.isOpen()) {
                webcam.close();

            }

            webcam.setViewSize(maxResolution);
            webcam.open();

            panel = new WebcamPanel(webcam);
            panel.setPreferredSize(maxResolution);
            panel.setFPSDisplayed(true);

            jPanel2.add(panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 428, 316));
            executor.execute(this);
            executor.shutdown();

        } else {
            System.out.println("Issue with webcam");
        }

    }

    @Override
    public Thread newThread(Runnable r) {
        Thread t = new Thread(r, "My Thread");
        t.setDaemon(true);
        return t;

    }

    private void stopWebcam() {
        if (webcam != null && webcam.isOpen()) {
            webcam.close();

        }
    }

    private BufferedImage imagee = null;

    private void CircularImageFrame(String imagePath) {
        try {
            ResultSet resultSet = MySQL.executeSearch("SELECT * FROM `employee` WHERE `email` = '" + resultMap.get("email") + "'");
            if (!resultSet.next()) {
                showPopUpCertainDuration("Employee is not Registered or Deleted", "Invalid Qr", JOptionPane.ERROR_MESSAGE);
                return;
            }

            imagee = null;
            File imageFile = new File(imagePath);
            if (imageFile.exists()) {
                try {
                    imagee = ImageIO.read(imageFile);
                    imagee = createCircularImage(imagee);
                    ImageIcon icon = new ImageIcon(imagee);
                    lblImage.setIcon(icon);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            } else {
                BufferedImage imageee = new BufferedImage(300, 300, BufferedImage.TYPE_INT_ARGB);
                Graphics2D g2d = imageee.createGraphics();
                g2d.setColor(Color.BLACK);
                g2d.fillOval(25, 25, 250, 250);
                g2d.setFont(new Font("Serif", Font.BOLD, 250));
                g2d.drawString(String.valueOf(resultMap.get("name").charAt(0)).toUpperCase(), TOP_ALIGNMENT, TOP_ALIGNMENT);
                g2d.dispose();

                ImageIcon imageIconn = new ImageIcon(imageee);
                lblImage.setIcon(imageIconn);
                this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                this.pack();
                this.setLocationRelativeTo(null);
                this.setVisible(true);
            }

            lblname.setHorizontalAlignment(JLabel.CENTER);
            lblname.setText(resultMap.get("name"));
            if (!checkInCheckout()) {
                return;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void showPopUpCertainDuration(String popUpMessage, String popUpHeader, Integer iconId) throws HeadlessException {
        final JOptionPane optionPane = new JOptionPane(popUpMessage, iconId);
        final JDialog dialog = optionPane.createDialog(popUpHeader);
        Timer timer = new Timer(5000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dialog.dispose();
                clearUserDetails();
            }
        });
        timer.setRepeats(false);
        timer.start();
        dialog.setVisible(true);
    }

    private BufferedImage createCircularImage(BufferedImage imagee) {
        int diameter = 285;
        BufferedImage resizedImage = new BufferedImage(diameter, diameter, BufferedImage.TYPE_INT_ARGB);
        Graphics2D g2 = resizedImage.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g2.drawImage(imagee, 0, 0, diameter, diameter, null);
        g2.dispose();

        BufferedImage circularImage = new BufferedImage(diameter, diameter, BufferedImage.TYPE_INT_ARGB);
        g2 = circularImage.createGraphics();
        Ellipse2D.Double circle = new Ellipse2D.Double(0, 0, diameter, diameter);
        g2.setClip(circle);
        g2.drawImage(resizedImage, 0, 0, null);
        g2.dispose();
        return circularImage;
    }

    
    public boolean checkInCheckout() {
        String popUpHeader = null;
        String popUpMessage = null;
        Color color = null;

        LocalDate currentDate = LocalDate.now();
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");

        LocalDateTime currentDateTime = LocalDateTime.now();
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

        try {
            ResultSet resultSet = MySQL.executeSearch("SELECT * FROM `attendance` WHERE `date`='" + currentDate.format(dateFormatter) + "' AND `employee_id`=" + Integer.valueOf(resultMap.get("id")) + "");

            if (resultSet.next()) {
                String checkOutDateTime = resultSet.getString(4);
                if (checkOutDateTime != null) {
                    popUpMessage = "Already Checked Out For the Day";
                    popUpHeader = "Invalid Checkout";
                    showPopUpCertainDuration(popUpMessage, popUpHeader, JOptionPane.ERROR_MESSAGE);
                    return true;
                }

                String checkInDateTime = resultSet.getString(3);
                LocalDateTime checkInLocalDateTime = LocalDateTime.parse(checkInDateTime, dateTimeFormatter);
                Duration duration = Duration.between(checkInLocalDateTime, currentDateTime);

                long hours = duration.toHours();
                long minutes = duration.minusHours(hours).toMinutes();
                long seconds = duration.minusHours(hours).minusMinutes(minutes).getSeconds();

                if (!(hours > 0 || (hours == 0 && minutes >= 1))) {
                    long remainingMinutes = 4 - minutes;
                    long remainingSeconds = 60 - seconds;

                    popUpMessage = String.format("Your work duration is less than 5 minutes\nYou can check out after: %d minutes and %d seconds", remainingMinutes, remainingSeconds);
                    popUpHeader = "Duration Warning";
                    showPopUpCertainDuration(popUpMessage, popUpHeader, JOptionPane.WARNING_MESSAGE);
                    return true;
                }

                Connection connection = DatabaseConnection.getConnection(); // Assuming DatabaseConnection class provides a static getConnection() method
                String updateQuery = "UPDATE `attendance` SET check_out=?, workduration=? WHERE date=? AND employee_id=?";
                PreparedStatement preparedStatement = connection.prepareStatement(updateQuery);
                preparedStatement.setString(1, currentDateTime.format(dateTimeFormatter));
                preparedStatement.setString(2, "" + hours + " Hours and " + minutes + " Minutes ");
                preparedStatement.setString(3, currentDate.format(dateFormatter));
                preparedStatement.setString(4, resultMap.get("id"));

                preparedStatement.executeUpdate();
                preparedStatement.close();

                popUpHeader = "Checkout";
                popUpMessage = "Checked Out at " + currentDateTime.format(dateTimeFormatter) + "\nWork Duration: " + hours + " Hours and " + minutes + " Minutes";
                color = Color.RED;
            } else {
                Connection connection = DatabaseConnection.getConnection(); // Assuming DatabaseConnection class provides a static getConnection() method
                String insertQuery = "INSERT INTO `attendance` (employee_id, date, check_in) VALUES (?, ?, ?)";
                PreparedStatement preparedStatement = connection.prepareStatement(insertQuery);
                preparedStatement.setString(1, resultMap.get("id"));
                preparedStatement.setString(2, currentDate.format(dateFormatter));
                preparedStatement.setString(3, currentDateTime.format(dateTimeFormatter));
                preparedStatement.executeUpdate();
                preparedStatement.close();

                popUpHeader = "Check-In";
                popUpMessage = "Checked In At " + currentDateTime.format(dateTimeFormatter);
                color = Color.GREEN;
            }

            lblCheckInCheckout.setHorizontalAlignment(JLabel.CENTER);
            lblCheckInCheckout.setText(popUpHeader);
            lblCheckInCheckout.setForeground(color);
            lblCheckInCheckout.setBackground(Color.DARK_GRAY);
            lblCheckInCheckout.setOpaque(true);
            showPopUpCertainDuration(popUpMessage, popUpHeader, JOptionPane.INFORMATION_MESSAGE);
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public void paint(Graphics g) {
        super.paint(g);
        if (imagee != null) {
            g.drawImage(imagee, 0, 0, null);
        }
    }

   
    private void clearUserDetails() {
        lblCheckInCheckout.setText("");
        lblCheckInCheckout.setBackground(null);
        lblCheckInCheckout.setForeground(null);
        lblCheckInCheckout.setOpaque(false);
        lblname.setText("");
        lblImage.setIcon(null);

    }

}
