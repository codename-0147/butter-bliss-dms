/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package gui;

import java.io.File;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import model.MySQLNew;

/**
 *
 * @author barth
 */
public class BackupNRestore extends javax.swing.JPanel {
    private WHome home;

    /**
     * Creates new form Overview
     */
    public BackupNRestore(WHome home) {
        initComponents();
        this.home = home;
    }
    
    private void backupDatabase() {
        try {
            String backupDir = new File("").getAbsolutePath() + File.separator + "Backups";
            File backupFolder = new File(backupDir);
            
            if (!backupFolder.exists()) {
                backupFolder.mkdirs();
            }

            String date = new SimpleDateFormat("yyyy-MM-dd").format(new Date());
            String backupFileName = "backup-" + date + ".sql";
            String backupFilePath = backupDir + File.separator + backupFileName;
            
            String appPath = new File("").getAbsolutePath();
            File dbInfoFile = new File(appPath + File.separator + "dbinfo.ser");
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(dbInfoFile));
            MySQLNew db = (MySQLNew) ois.readObject();
            ois.close();

            List<String> command = Arrays.asList(
                db.dump,
                "-h", db.host,
                "-P", db.port,
                "-u", db.un,
                "-p" + db.pw,
                db.dbname
            );

            ProcessBuilder processBuilder = new ProcessBuilder(command);
            processBuilder.redirectOutput(new File(backupFilePath));
            processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);

            Process process = processBuilder.start();
            int processComplete = process.waitFor();

            if (processComplete == 0) {
                JOptionPane.showMessageDialog(null, "Backup created successfully: " + backupFilePath);
            } else {
                JOptionPane.showMessageDialog(null, "Backup failed.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }
    
    private void restoreDatabase() {
        try {
            JFileChooser fileChooser = new JFileChooser(new File("").getAbsolutePath() + File.separator + "Backups");
            fileChooser.setDialogTitle("Select SQL File to Restore");
            int userSelection = fileChooser.showOpenDialog(null);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File restoreFile = fileChooser.getSelectedFile();
                
                String appPath = new File("").getAbsolutePath();
                File dbInfoFile = new File(appPath + File.separator + "dbinfo.ser");
                ObjectInputStream ois = new ObjectInputStream(new FileInputStream(dbInfoFile));
                MySQLNew db = (MySQLNew) ois.readObject();
                ois.close();

                List<String> command = Arrays.asList(
                    "mysql",
                    "-h", db.host,
                    "-P", db.port,
                    "-u", db.un,
                    "-p" + db.pw,
                    db.dbname
                );

                ProcessBuilder processBuilder = new ProcessBuilder(command);
                processBuilder.redirectInput(restoreFile);
                processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);

                Process process = processBuilder.start();
                int processComplete = process.waitFor();

                if (processComplete == 0) {
                    JOptionPane.showMessageDialog(null, "Database restored successfully.");
                } else {
                    JOptionPane.showMessageDialog(null, "Restore failed.");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        closeLabel = new javax.swing.JLabel();
        backupButton = new javax.swing.JButton();
        restoreButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Poppins", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(66, 45, 22));
        jLabel1.setText("DB Backup & Restore");

        closeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/close-icon.png"))); // NOI18N
        closeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeLabelMouseClicked(evt);
            }
        });

        backupButton.setBackground(new java.awt.Color(245, 219, 200));
        backupButton.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        backupButton.setForeground(new java.awt.Color(0, 0, 0));
        backupButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/database-backup-icon.png"))); // NOI18N
        backupButton.setText("Backup");
        backupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backupButtonActionPerformed(evt);
            }
        });

        restoreButton.setBackground(new java.awt.Color(245, 219, 200));
        restoreButton.setFont(new java.awt.Font("Poppins", 1, 18)); // NOI18N
        restoreButton.setForeground(new java.awt.Color(0, 0, 0));
        restoreButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/database-restore-icon.png"))); // NOI18N
        restoreButton.setText("Restore");
        restoreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restoreButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 473, Short.MAX_VALUE)
                        .addComponent(closeLabel))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(backupButton)
                            .addComponent(restoreButton))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(closeLabel))
                .addGap(18, 18, 18)
                .addComponent(backupButton)
                .addGap(18, 18, 18)
                .addComponent(restoreButton)
                .addContainerGap(410, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void closeLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeLabelMouseClicked
        this.home.removeBackupNRestore();
    }//GEN-LAST:event_closeLabelMouseClicked

    private void backupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupButtonActionPerformed
        backupDatabase();
    }//GEN-LAST:event_backupButtonActionPerformed

    private void restoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreButtonActionPerformed
        restoreDatabase();
    }//GEN-LAST:event_restoreButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backupButton;
    private javax.swing.JLabel closeLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton restoreButton;
    // End of variables declaration//GEN-END:variables
}
